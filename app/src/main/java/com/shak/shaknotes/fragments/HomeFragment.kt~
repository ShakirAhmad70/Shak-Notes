package com.shak.shaknotes.fragments

import android.app.Dialog
import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.Toast
import androidx.appcompat.widget.AppCompatButton
import androidx.appcompat.widget.AppCompatEditText
import androidx.appcompat.widget.LinearLayoutCompat
import androidx.fragment.app.Fragment
import androidx.lifecycle.lifecycleScope
import androidx.recyclerview.widget.GridLayoutManager
import androidx.recyclerview.widget.RecyclerView
import com.google.android.material.floatingactionbutton.FloatingActionButton
import com.shak.shaknotes.R
import com.shak.shaknotes.adapters.NoteRvAdapter
import com.shak.shaknotes.database.dbHelpers.NoteDbHelper
import com.shak.shaknotes.database.entities.Note
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext

class HomeFragment : Fragment() {

    private lateinit var noteAdapter: NoteRvAdapter
    private val notesList = mutableListOf<Note>()

    override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View? {
        val view = inflater.inflate(R.layout.fragment_home, container, false)

        val addNoteBtn = view.findViewById<AppCompatButton>(R.id.addNoteBtn)
        val addItemFab = view.findViewById<FloatingActionButton>(R.id.addItemFab)
        val showItemsRV = view.findViewById<RecyclerView>(R.id.showItemsRV)
        val showEmptyLay = view.findViewById<LinearLayoutCompat>(R.id.showEmptyLay)

        noteAdapter = NoteRvAdapter(notesList).apply {
            onDataChanged = {
                if (notesList.isEmpty()) {
                    showEmptyLay.visibility = View.VISIBLE
                    showItemsRV.visibility = View.GONE
                } else {
                    showEmptyLay.visibility = View.GONE
                    showItemsRV.visibility = View.VISIBLE
                }
            }
        }

        showItemsRV.layoutManager = GridLayoutManager(requireContext(), 2)
        showItemsRV.adapter = noteAdapter

        val noteDbHelper = NoteDbHelper.getInstance(requireContext())

        lifecycleScope.launch(Dispatchers.IO) {
            val data = noteDbHelper.noteDao().getAllNotes()
            withContext(Dispatchers.Main) {
                notesList.clear()
                notesList.addAll(data)
                noteAdapter.notifyDataSetChanged()
                noteAdapter.onDataChanged?.invoke()
            }
        }

        addItemFab.setOnClickListener {
            val addNoteDialog = Dialog(requireContext())
            addNoteDialog.setContentView(R.layout.add_note_dialog)
            addNoteDialog.window?.setLayout(
                ViewGroup.LayoutParams.MATCH_PARENT,
                ViewGroup.LayoutParams.WRAP_CONTENT
            )
            addNoteDialog.show()

            val edtTitle = addNoteDialog.findViewById<AppCompatEditText>(R.id.titleEdt)
            val edtNote = addNoteDialog.findViewById<AppCompatEditText>(R.id.noteEdt)
            val addBtn = addNoteDialog.findViewById<AppCompatButton>(R.id.addBtn)

            addBtn.setOnClickListener {
                val title = edtTitle.text.toString().trim()
                val noteContent = edtNote.text.toString().trim()

                if (title.isNotEmpty() && noteContent.isNotEmpty()) {
                    lifecycleScope.launch(Dispatchers.IO) {
                        val note = Note(title = title, noteContent = noteContent)
                        noteDbHelper.noteDao().insertNote(note)

                        val updatedList = noteDbHelper.noteDao().getAllNotes()

                        withContext(Dispatchers.Main) {
                            notesList.clear()
                            notesList.addAll(updatedList)
                            noteAdapter.notifyDataSetChanged()
                            noteAdapter.onDataChanged?.invoke()
                            addNoteDialog.dismiss()
                        }
                    }
                } else {
                    Toast.makeText(
                        requireContext(),
                        "Please enter title and note",
                        Toast.LENGTH_SHORT
                    ).show()
                }
            }
        }

        addNoteBtn.setOnClickListener {
            addItemFab.performClick()
        }

        return view
    }
}